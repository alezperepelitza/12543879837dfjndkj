let tg = window.Telegram.WebApp;
tg.expand();

class MeditationApp {
    constructor() {
        this.duration = 20;
        this.maxDuration = 60;
        this.isActive = false;
        this.isDragging = false;
        this.currentSound = 'silence';
        this.sounds = {
            rain: new Audio('sounds/rain.mp3'),
            forest: new Audio('sounds/forest.mp3'),
            ocean: new Audio('sounds/ocean.mp3')
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–∏ –¥–ª—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫
        this.breathingSounds = {
            inhale: new Audio('sounds/inhale.mp3'),
            exhale: new Audio('sounds/exhale.mp3'),
            hold: new Audio('sounds/hold.mp3')
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats = this.loadStats();
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.achievements = {
            first_session: {
                id: 'first_session',
                title: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
                description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é',
                icon: 'üéØ',
                unlocked: false
            },
            daily_streak_7: {
                id: 'daily_streak_7',
                title: '–ù–µ–¥–µ–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏',
                description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
                icon: 'üî•',
                unlocked: false
            },
            total_hours_10: {
                id: 'total_hours_10',
                title: '–ü—É—Ç—å –∫ –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—é',
                description: '10 —á–∞—Å–æ–≤ –º–µ–¥–∏—Ç–∞—Ü–∏–∏',
                icon: '‚≠ê',
                unlocked: false
            },
            morning_person: {
                id: 'morning_person',
                title: '–†–∞–Ω–Ω—è—è –ø—Ç–∏—á–∫–∞',
                description: '5 –º–µ–¥–∏—Ç–∞—Ü–∏–π –¥–æ 8 —É—Ç—Ä–∞',
                icon: 'üåÖ',
                unlocked: false
            },
            night_owl: {
                id: 'night_owl',
                title: '–ù–æ—á–Ω–∞—è —Å–æ–≤–∞',
                description: '5 –º–µ–¥–∏—Ç–∞—Ü–∏–π –ø–æ—Å–ª–µ 22:00',
                icon: 'üåô',
                unlocked: false
            }
        };

        this.startAngle = -90;
        this.currentAngle = 0;

        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–≤—É–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        [...Object.values(this.sounds), ...Object.values(this.breathingSounds)].forEach(sound => {
            sound.load();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            sound.volume = 0.7;
            
            // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏
            if (Object.values(this.sounds).includes(sound)) {
                sound.loop = true;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
            sound.onerror = () => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–∞:', sound.src);
                tg.showPopup({
                    title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.',
                    buttons: [{type: 'ok'}]
                });
            };
        });

        this.hasInteracted = false;
        this.isPaused = false;
        this.currentBreathingTechnique = null;
        this.breathingInterval = null;

        // –¢–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è
        this.breathingTechniques = {
            '4-4-4-4': {
                name: '–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ',
                sequence: [
                    { action: '–í–¥–æ—Ö', duration: 4 },
                    { action: '–ó–∞–¥–µ—Ä–∂–∫–∞', duration: 4 },
                    { action: '–í—ã–¥–æ—Ö', duration: 4 },
                    { action: '–ó–∞–¥–µ—Ä–∂–∫–∞', duration: 4 }
                ]
            },
            '4-7-8': {
                name: '–¢–µ—Ö–Ω–∏–∫–∞ 4-7-8',
                sequence: [
                    { action: '–í–¥–æ—Ö', duration: 4 },
                    { action: '–ó–∞–¥–µ—Ä–∂–∫–∞', duration: 7 },
                    { action: '–í—ã–¥–æ—Ö', duration: 8 }
                ]
            },
            'box': {
                name: '–ö–æ—Ä–æ–±–æ—á–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ',
                sequence: [
                    { action: '–í–¥–æ—Ö', duration: 5 },
                    { action: '–ó–∞–¥–µ—Ä–∂–∫–∞', duration: 5 },
                    { action: '–í—ã–¥–æ—Ö', duration: 5 },
                    { action: '–ó–∞–¥–µ—Ä–∂–∫–∞', duration: 5 }
                ]
            }
        };

        this.initializeElements();
        this.initializeEventListeners();
        this.updateUI(this.duration);
    }

    initializeElements() {
        this.timer = document.querySelector('.timer');
        this.handle = document.querySelector('.handle');
        this.timeDisplay = document.querySelector('.time');
        this.startButton = document.querySelector('.start');
        this.soundOptions = document.querySelectorAll('.sound-option');
        this.ringProgress = document.querySelector('.ring-progress');
        this.pauseButton = document.querySelector('.pause');
        this.breathingButton = document.querySelector('.breathing-techniques-btn');
        this.breathingModal = document.querySelector('.breathing-modal');
        this.breathingText = document.querySelector('.breathing-text');
        this.sliderHandle = document.querySelector('.slider-handle');
        this.sliderTrack = document.querySelector('.slider-track');
        this.sliderFill = document.querySelector('.slider-fill');
    }

    initializeEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.handle.addEventListener('mousedown', this.startDragging.bind(this));
        this.handle.addEventListener('touchstart', this.startDragging.bind(this));
        
        document.addEventListener('mousemove', this.handleDrag.bind(this));
        document.addEventListener('touchmove', this.handleDrag.bind(this));
        
        document.addEventListener('mouseup', this.stopDragging.bind(this));
        document.addEventListener('touchend', this.stopDragging.bind(this));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—É–∫–æ–≤ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –º–µ–Ω—è—Ç—å –≤–æ –≤—Ä–µ–º—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏
        this.soundOptions.forEach(option => {
            option.addEventListener('click', () => {
                const sound = option.dataset.sound;
                this.changeSound(sound);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        this.startButton.addEventListener('click', () => {
            if (this.isActive) {
                this.stopMeditation();
            } else {
                this.startMeditation();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã
        this.pauseButton.addEventListener('click', () => {
            this.togglePause();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Ö–Ω–∏–∫ –¥—ã—Ö–∞–Ω–∏—è
        this.breathingButton.addEventListener('click', () => {
            this.breathingModal.classList.add('visible');
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        this.breathingModal.addEventListener('click', (e) => {
            if (e.target === this.breathingModal) {
                this.breathingModal.classList.remove('visible');
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
        document.querySelector('.close-modal').addEventListener('click', () => {
            this.breathingModal.classList.remove('visible');
        });

        // –í—ã–±–æ—Ä —Ç–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è
        document.querySelectorAll('.breathing-list button').forEach(button => {
            button.addEventListener('click', () => {
                const technique = button.dataset.technique;
                this.startBreathingTechnique(technique);
                this.breathingModal.classList.remove('visible');
                
                // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                button.classList.add('active');
                setTimeout(() => button.classList.remove('active'), 200);
            });
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
        document.querySelector('.reset').addEventListener('click', () => {
            this.stopMeditation();
        });
    }

    startDragging(e) {
        if (!this.isActive) {
            this.isDragging = true;
            e.preventDefault();
        }
    }

    handleDrag(e) {
        if (this.isDragging && !this.isActive) {
            e.preventDefault();
            
            const rect = this.timer.getBoundingClientRect();
            const center = {
                x: rect.left + rect.width / 2,
                y: rect.top + rect.height / 2
            };

            const clientX = e.touches ? e.touches[0].clientX : e.clientX;
            const clientY = e.touches ? e.touches[0].clientY : e.clientY;

            // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ 0 –≥—Ä–∞–¥—É—Å–æ–≤ - —ç—Ç–æ 12 —á–∞—Å–æ–≤
            let angle = Math.atan2(clientY - center.y, clientX - center.x) * 180 / Math.PI;
            angle = (angle + 90 + 360) % 360; // +90 —á—Ç–æ–±—ã –Ω–∞—á–∞–ª–æ –±—ã–ª–æ —Å–≤–µ—Ä—Ö—É

            this.currentAngle = angle;
            this.duration = Math.round((angle / 360) * this.maxDuration);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            if (this.duration < 1) {
                this.duration = 1;
                angle = (1 / this.maxDuration) * 360;
            }
            if (this.duration > this.maxDuration) {
                this.duration = this.maxDuration;
                angle = 360;
            }

            this.updateUI(angle);
        }
    }

    stopDragging() {
        this.isDragging = false;
    }

    updateUI(angle) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        if (!this.isActive) {
            this.timeDisplay.textContent = this.duration;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª—å—Ü–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const circumference = 283;
            const offset = circumference - ((angle / 360) * circumference);
            this.ringProgress.style.strokeDashoffset = offset;

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
            this.handle.style.transform = `translate(-50%, -50%) rotate(${angle}deg)`;
        } else {
            const minutes = Math.floor(this.remainingTime / 60);
            const seconds = this.remainingTime % 60;
            this.timeDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            const progress = this.remainingTime / (this.duration * 60);
            const currentAngle = this.startAngle * progress;
            const circumference = 283;
            const offset = circumference - ((currentAngle / 360) * circumference);
            this.ringProgress.style.strokeDashoffset = offset;
            this.handle.style.transform = `translate(-50%, -50%) rotate(${currentAngle}deg)`;
        }
    }

    startMeditation() {
        this.isActive = true;
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º —Å–º–µ–Ω—É –∫–Ω–æ–ø–æ–∫
        this.startButton.classList.add('hiding');
        setTimeout(() => {
            this.startButton.classList.add('hidden');
            document.querySelector('.meditation-controls').classList.remove('hidden');
            setTimeout(() => {
                document.querySelector('.meditation-controls').classList.add('visible');
            }, 50);
        }, 300);

        this.remainingTime = this.duration * 60;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        this.startAngle = this.currentAngle || 360;
        
        this.playSound();
        this.startTimer();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
        if (this.currentBreathingTechnique) {
            this.startBreathingTechnique(this.currentBreathingTechnique);
        }

        this.sliderHandle.style.pointerEvents = 'none';
    }

    startTimer() {
        if (this.timer) {
            clearInterval(this.timer);
        }

        this.timer = setInterval(() => {
            if (!this.isPaused) {
                this.remainingTime--;
                
                const progress = this.remainingTime / (this.duration * 60);
                const angle = this.startAngle * progress;
                
                this.updateUI(angle);

                if (this.remainingTime <= 0) {
                    this.completeMeditation();
                }
            }
        }, 1000);
    }

    stopMeditation() {
        this.isActive = false;
        this.isPaused = false;
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–æ–ø–æ–∫
        document.querySelector('.meditation-controls').classList.remove('visible');
        setTimeout(() => {
            document.querySelector('.meditation-controls').classList.add('hidden');
            this.startButton.classList.remove('hidden', 'hiding');
        }, 300);

        clearInterval(this.timer);
        this.timer = null;
        this.stopSound();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        this.duration = 20; // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.currentAngle = 0;
        this.updateUI(this.duration);
        this.stopBreathingTechnique();
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        this.isDragging = false;
        this.handle.style.pointerEvents = 'auto';
        this.sliderHandle.style.pointerEvents = 'auto';
    }

    completeMeditation() {
        this.stopMeditation();
        this.updateStats();
        this.checkAchievements();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        tg.showPopup({
            title: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            message: `–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞–ª–∏ ${this.duration} –º–∏–Ω—É—Ç.`,
            buttons: [{type: 'ok'}]
        });
    }

    changeSound(sound) {
        const previousSound = this.currentSound;
        this.currentSound = sound;

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–≤—É–∫
        if (previousSound !== 'silence' && this.sounds[previousSound]) {
            this.sounds[previousSound].pause();
            this.sounds[previousSound].currentTime = 0;
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∑–≤—É–∫, –µ—Å–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
        if (this.isActive && sound !== 'silence') {
            this.playSound();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.soundOptions.forEach(option => {
            option.classList.toggle('active', option.dataset.sound === sound);
        });
    }

    playSound() {
        if (this.currentSound !== 'silence' && this.sounds[this.currentSound]) {
            const sound = this.sounds[this.currentSound];
            
            // –ü—Ä–æ–±—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const playPromise = sound.play();
            
            if (playPromise !== undefined) {
                playPromise.catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
                    
                    if (error.name === 'NotAllowedError') {
                        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                        tg.showPopup({
                            title: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ',
                            message: '–î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                            buttons: [{
                                type: 'ok',
                                text: '–ü–æ–Ω—è—Ç–Ω–æ'
                            }]
                        });
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                        const unlockAudio = () => {
                            sound.play().catch(console.error);
                            document.removeEventListener('click', unlockAudio);
                        };
                        document.addEventListener('click', unlockAudio);
                    }
                });
            }
        }
    }

    stopSound() {
        Object.values(this.sounds).forEach(sound => {
            sound.pause();
            sound.currentTime = 0;
        });
    }

    updateStats() {
        const today = new Date().toISOString().split('T')[0];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.totalMinutes += this.duration;
        this.stats.lastMeditation = today;
        
        if (!this.stats.meditationDays.includes(today)) {
            this.stats.meditationDays.push(today);
        }

        // –°—á–∏—Ç–∞–µ–º –¥–Ω–∏ –ø–æ–¥—Ä—è–¥
        this.stats.streak = this.calculateStreak();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.saveStats();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        document.querySelectorAll('.stat-value')[0].textContent = this.stats.streak;
        document.querySelectorAll('.stat-value')[1].textContent = this.stats.totalMinutes;
    }

    calculateStreak() {
        const today = new Date();
        let streak = 0;
        let currentDate = today;

        while (this.stats.meditationDays.includes(currentDate.toISOString().split('T')[0])) {
            streak++;
            currentDate.setDate(currentDate.getDate() - 1);
        }

        return streak;
    }

    checkAchievements() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        if (!this.achievements.first_session.unlocked) {
            this.unlockAchievement('first_session');
        }

        if (this.stats.streak >= 7 && !this.achievements.daily_streak_7.unlocked) {
            this.unlockAchievement('daily_streak_7');
        }

        if (this.stats.totalMinutes >= 600 && !this.achievements.total_hours_10.unlocked) {
            this.unlockAchievement('total_hours_10');
        }

        const hour = new Date().getHours();
        if (hour < 8) {
            this.stats.morningMeditations = (this.stats.morningMeditations || 0) + 1;
            if (this.stats.morningMeditations >= 5 && !this.achievements.morning_person.unlocked) {
                this.unlockAchievement('morning_person');
            }
        }

        if (hour >= 22) {
            this.stats.nightMeditations = (this.stats.nightMeditations || 0) + 1;
            if (this.stats.nightMeditations >= 5 && !this.achievements.night_owl.unlocked) {
                this.unlockAchievement('night_owl');
            }
        }
    }

    unlockAchievement(id) {
        const achievement = this.achievements[id];
        achievement.unlocked = true;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        tg.showPopup({
            title: '–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
            message: `${achievement.icon} ${achievement.title}\n${achievement.description}`,
            buttons: [{type: 'ok'}]
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.saveAchievements();
    }

    loadStats() {
        const defaultStats = {
            totalMinutes: 0,
            streak: 0,
            meditationDays: [],
            lastMeditation: null,
            morningMeditations: 0,
            nightMeditations: 0
        };

        const saved = localStorage.getItem('meditation_stats');
        return saved ? JSON.parse(saved) : defaultStats;
    }

    saveStats() {
        localStorage.setItem('meditation_stats', JSON.stringify(this.stats));
    }

    saveAchievements() {
        localStorage.setItem('meditation_achievements', JSON.stringify(this.achievements));
    }

    togglePause() {
        this.isPaused = !this.isPaused;
        this.pauseButton.textContent = this.isPaused ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '–ü–∞—É–∑–∞';
        
        if (this.isPaused) {
            this.stopSound();
        } else {
            this.playSound();
        }
    }

    startBreathingTechnique(techniqueId) {
        this.currentBreathingTechnique = techniqueId;
        
        // –ï—Å–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Ö–Ω–∏–∫—É
        if (!this.isActive) {
            return;
        }

        if (this.breathingInterval) {
            clearInterval(this.breathingInterval);
        }

        const technique = this.breathingTechniques[techniqueId];
        let stepIndex = 0;
        let timeLeft = technique.sequence[0].duration;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫
        const firstStep = technique.sequence[0];
        this.breathingText.textContent = `${firstStep.action} (${timeLeft})`;
        this.breathingText.classList.add('visible');
        this.playBreathingSound(firstStep.action);

        this.breathingInterval = setInterval(() => {
            if (!this.isPaused) {
                timeLeft--;

                if (timeLeft < 0) {
                    stepIndex = (stepIndex + 1) % technique.sequence.length;
                    timeLeft = technique.sequence[stepIndex].duration;
                    
                    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã
                    const step = technique.sequence[stepIndex];
                    this.playBreathingSound(step.action);
                }

                const step = technique.sequence[stepIndex];
                this.breathingText.textContent = `${step.action} (${timeLeft})`;
            }
        }, 1000);
    }

    playBreathingSound(action) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–∏ –¥—ã—Ö–∞–Ω–∏—è
        Object.values(this.breathingSounds).forEach(sound => {
            sound.pause();
            sound.currentTime = 0;
        });

        // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∑–≤—É–∫
        switch(action.toLowerCase()) {
            case '–≤–¥–æ—Ö':
                this.breathingSounds.inhale.play().catch(console.error);
                break;
            case '–≤—ã–¥–æ—Ö':
                this.breathingSounds.exhale.play().catch(console.error);
                break;
            case '–∑–∞–¥–µ—Ä–∂–∫–∞':
                this.breathingSounds.hold.play().catch(console.error);
                break;
        }
    }

    stopBreathingTechnique() {
        if (this.breathingInterval) {
            clearInterval(this.breathingInterval);
            this.breathingInterval = null;
        }
        this.breathingText.classList.remove('visible');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–∏ –¥—ã—Ö–∞–Ω–∏—è
        Object.values(this.breathingSounds).forEach(sound => {
            sound.pause();
            sound.currentTime = 0;
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new MeditationApp();
}); 