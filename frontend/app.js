let tg = window.Telegram.WebApp;
tg.expand();

class MeditationApp {
    constructor() {
        this.selectedDuration = 5;
        this.maxDuration = 60; // –º–∞–∫—Å–∏–º—É–º 60 –º–∏–Ω—É—Ç
        this.isDragging = false;
        this.startAngle = -90; // –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—Ö–Ω–µ–π —Ç–æ—á–∫–∏
        this.selectedSound = 'silence';
        this.isActive = false;
        this.timer = null;
        this.progress = 0;
        this.audio = null;
        this.sounds = {
            'rain': { url: 'sounds/rain.mp3', volume: 0.5 },
            'forest': { url: 'sounds/forest.mp3', volume: 0.5 },
            'ocean': { url: 'sounds/ocean.mp3', volume: 0.5 },
            'silence': null
        };
        
        this.activeSound = null;
        this.activeAmbient = null;
        this.activeBackground = null;
        this.volume = 0.5;
        
        this.achievements = {
            'first_meditation': { title: '–ü–µ—Ä–≤–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è', icon: 'üéØ' },
            'week_streak': { title: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', icon: 'üî•' },
            'hour_total': { title: '–ß–∞—Å –º–µ–¥–∏—Ç–∞—Ü–∏–∏', icon: '‚≠ê' }
            // ... –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è
        this.breathingTechniques = {
            '4-4-4-4': {
                name: '–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ',
                sequence: [
                    { action: '–í–¥–æ—Ö', duration: 4 },
                    { action: '–ó–∞–¥–µ—Ä–∂–∫–∞', duration: 4 },
                    { action: '–í—ã–¥–æ—Ö', duration: 4 },
                    { action: '–ó–∞–¥–µ—Ä–∂–∫–∞', duration: 4 }
                ]
            },
            '4-7-8': {
                name: '–¢–µ—Ö–Ω–∏–∫–∞ 4-7-8',
                sequence: [
                    { action: '–í–¥–æ—Ö', duration: 4 },
                    { action: '–ó–∞–¥–µ—Ä–∂–∫–∞', duration: 7 },
                    { action: '–í—ã–¥–æ—Ö', duration: 8 }
                ]
            }
        };
        
        this.quotes = [
            { text: "–î—ã—à–∏ –∏ –æ—Ç–ø—É—Å–∫–∞–π", author: "–ë—É–¥–¥–∞" },
            { text: "–ù–∞—Å—Ç–æ—è—â–µ–µ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ", author: "–¢–∏—á –ù–∞—Ç –•–∞–Ω" },
            { text: "–í —Ç–∏—à–∏–Ω–µ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –º—É–¥—Ä–æ—Å—Ç—å", author: "–ö–æ–Ω—Ñ—É—Ü–∏–π" },
            // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ü–∏—Ç–∞—Ç
        ];
        
        this.showRandomQuote();
        
        this.initializeElements();
        this.initializeEventListeners();
        this.loadUserData();
        this.initializeReminders();
        this.initializeBreathing();
        this.initializeTabs();
        this.initializeSoundControls();
        this.initializeCircleSelector();
        this.uiSounds = {
            tick: new Audio('sounds/ui/tick.mp3'),
            complete: new Audio('sounds/ui/complete.mp3'),
            achievement: new Audio('sounds/ui/achievement.mp3')
        };
    }
    
    initializeElements() {
        this.timeDisplay = document.querySelector('.time');
        this.progressCircle = document.querySelector('.progress-circle');
        this.startButton = document.querySelector('.start-btn');
        this.durationButtons = document.querySelectorAll('.duration-selector button');
        this.soundButtons = document.querySelectorAll('.sound-selector button');
    }
    
    initializeEventListeners() {
        this.durationButtons.forEach(button => {
            button.addEventListener('click', () => {
                this.selectedDuration = parseInt(button.dataset.time);
                this.updateUI();
            });
        });
        
        this.soundButtons.forEach(button => {
            button.addEventListener('click', () => {
                this.selectedSound = button.dataset.sound;
                this.updateUI();
            });
        });
        
        this.startButton.addEventListener('click', () => {
            if (this.isActive) {
                this.stopMeditation();
            } else {
                this.startMeditation();
            }
        });
    }
    
    initializeSoundControls() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        const volumeControl = document.querySelector('.volume-control input');
        volumeControl.addEventListener('input', (e) => {
            this.setVolume(e.target.value / 100);
        });
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–æ–≤
        this.preloadSounds();
    }
    
    preloadSounds() {
        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–≤—É–∫–∞
        for (const type in this.sounds) {
            for (const sound in this.sounds[type]) {
                if (this.sounds[type][sound]) {
                    const audio = new Audio();
                    audio.src = this.sounds[type][sound].url;
                    audio.preload = 'auto';
                    this.sounds[type][sound].audio = audio;
                }
            }
        }
    }
    
    setVolume(value) {
        this.volume = value;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤—É–∫–æ–≤
        if (this.activeAmbient) {
            this.activeAmbient.volume = value * this.sounds.ambient[this.selectedSound].volume;
        }
        if (this.activeBackground) {
            this.activeBackground.volume = value * this.sounds.background.meditation1.volume;
        }
    }
    
    startMeditation() {
        this.isActive = true;
        this.progress = 0;
        this.startButton.textContent = '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
        
        const duration = this.selectedDuration * 60;
        let timeLeft = duration;
        
        this.timer = setInterval(() => {
            timeLeft--;
            this.progress = (duration - timeLeft) / duration * 100;
            
            this.updateUI();
            
            if (timeLeft <= 0) {
                this.completeMeditation();
            }
        }, 1000);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤—É–∫–∏
        this.startSounds();
    }
    
    startSounds() {
        this.stopSounds();
        
        if (this.selectedSound !== 'silence') {
            try {
                const sound = this.sounds[this.selectedSound];
                this.activeSound = new Audio(sound.url);
                this.activeSound.loop = true;
                this.activeSound.volume = sound.volume;
                
                const playPromise = this.activeSound.play();
                if (playPromise !== undefined) {
                    playPromise.catch(error => {
                        console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
                        tg.showPopup({
                            title: '–í–Ω–∏–º–∞–Ω–∏–µ',
                            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                            buttons: [{type: 'ok'}]
                        });
                    });
                }
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤—É–∫–∞:', error);
            }
        }
    }
    
    stopSounds() {
        if (this.activeAmbient) {
            this.activeAmbient.pause();
            this.activeAmbient = null;
        }
        if (this.activeBackground) {
            this.activeBackground.pause();
            this.activeBackground = null;
        }
    }
    
    stopMeditation() {
        this.isActive = false;
        clearInterval(this.timer);
        this.startButton.textContent = '–ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é';
        this.progress = 0;
        this.updateUI();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫–∏
        this.stopSounds();
    }
    
    completeMeditation() {
        this.stopMeditation();
        this.updateStats();
        tg.showPopup({
            title: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ ${this.selectedDuration}-–º–∏–Ω—É—Ç–Ω—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é.`,
            buttons: [{type: 'ok'}]
        });
    }
    
    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        const minutes = Math.floor(this.selectedDuration);
        const timeDisplay = document.querySelector('.time');
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–∏—Å–ª–∞
        const currentValue = parseInt(timeDisplay.textContent);
        const diff = minutes - currentValue;
        
        if (diff !== 0) {
            const step = diff > 0 ? 1 : -1;
            let current = currentValue;
            
            const animate = () => {
                current += step;
                timeDisplay.textContent = String(current).padStart(2, '0');
                
                if ((step > 0 && current < minutes) || (step < 0 && current > minutes)) {
                    requestAnimationFrame(animate);
                }
            };
            
            requestAnimationFrame(animate);
        }
    }
    
    loadUserData() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –∏–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
    }
    
    updateStats() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage –∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    }

    initializeReminders() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if ('Notification' in window) {
            Notification.requestPermission();
        }
    }

    setDailyReminder(hour, minute) {
        const now = new Date();
        const reminderTime = new Date(
            now.getFullYear(),
            now.getMonth(),
            now.getDate(),
            hour,
            minute
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('meditation_reminder', JSON.stringify({
            hour,
            minute,
            enabled: true
        }));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.saveReminderToServer(hour, minute);
    }

    checkAchievements() {
        const stats = this.loadUserStats();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é
        if (stats.totalSessions === 1) {
            this.unlockAchievement('first_meditation');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é –∏–∑ 7 –¥–Ω–µ–π
        if (this.checkStreak(7)) {
            this.unlockAchievement('week_streak');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
        if (stats.totalMinutes >= 60 && !stats.achievements.includes('hour_total')) {
            this.unlockAchievement('hour_total');
        }
    }

    unlockAchievement(achievementId) {
        const achievement = this.achievements[achievementId];
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const overlay = document.createElement('div');
        overlay.className = 'achievement-overlay';
        overlay.innerHTML = `
            <div class="achievement-popup">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-info">
                    <h3>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</h3>
                    <p>${achievement.title}</p>
                </div>
            </div>
        `;
        
        document.body.appendChild(overlay);
        setTimeout(() => overlay.remove(), 3000);
    }

    initializeBreathing() {
        // ... implementation of initializeBreathing method
    }

    initializeTabs() {
        const tabButtons = document.querySelectorAll('.tab-btn');
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const tabId = button.dataset.tab;
                this.switchTab(tabId);
            });
        });
    }
    
    switchTab(tabId) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelectorAll('.tab-pane').forEach(pane => {
            pane.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.querySelector(`[data-tab="${tabId}"]`).classList.add('active');
        document.getElementById(tabId).classList.add('active');
    }
    
    startBreathingExercise(technique) {
        const sequence = this.breathingTechniques[technique].sequence;
        let currentStep = 0;
        
        const runSequence = () => {
            if (currentStep >= sequence.length) {
                currentStep = 0;
            }
            
            const step = sequence[currentStep];
            this.updateBreathingUI(step.action, step.duration);
            
            setTimeout(() => {
                currentStep++;
                runSequence();
            }, step.duration * 1000);
        };
        
        runSequence();
    }
    
    updateBreathingUI(action, duration) {
        const text = document.querySelector('.breathing-text');
        const circle = document.querySelector('.breathing-circle');
        
        text.textContent = action;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫—Ä—É–≥–∞
        circle.style.animation = 
            action === '–í–¥–æ—Ö' ? 'breathe-in 4s' :
            action === '–í—ã–¥–æ—Ö' ? 'breathe-out 4s' :
            'hold 4s';
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    generateCalendar() {
        const calendar = document.querySelector('.calendar-grid');
        const today = new Date();
        const stats = this.loadUserStats();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        for (let i = 6; i >= 0; i--) {
            const date = new Date(today);
            date.setDate(date.getDate() - i);
            
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-day';
            dayElement.classList.add(
                stats.meditationDays.includes(date.toISOString().split('T')[0])
                    ? 'has-meditation'
                    : 'no-meditation'
            );
            
            calendar.appendChild(dayElement);
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    async updateLeaderboard() {
        const leaderboard = document.querySelector('.leaderboard-list');
        const leaders = await this.fetchLeaderboard();
        
        leaderboard.innerHTML = leaders.map((user, index) => `
            <div class="leaderboard-item">
                <span class="rank">${index + 1}</span>
                <span class="name">${user.name}</span>
                <span class="score">${user.totalMinutes} –º–∏–Ω</span>
            </div>
        `).join('');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    initializeVisibilityHandler() {
        document.addEventListener('visibilitychange', () => {
            if (document.hidden && this.activeAmbient) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                this.wasPlaying = !this.activeAmbient.paused;
                this.activeAmbient.pause();
            } else if (!document.hidden && this.wasPlaying) {
                // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                this.activeAmbient.play().catch(() => {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ');
                });
            }
        });
    }

    initializeCircleSelector() {
        const circle = document.querySelector('.progress-circle');
        const marker = document.querySelector('.time-marker');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        marker.addEventListener('mousedown', (e) => {
            this.isDragging = true;
            document.addEventListener('mousemove', this.handleDrag);
            document.addEventListener('mouseup', this.stopDrag);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        marker.addEventListener('touchstart', (e) => {
            this.isDragging = true;
            document.addEventListener('touchmove', this.handleDrag);
            document.addEventListener('touchend', this.stopDrag);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫—Ä—É–≥—É
        circle.addEventListener('click', (e) => {
            if (!this.isActive) {
                const rect = circle.getBoundingClientRect();
                const x = e.clientX - (rect.left + rect.width / 2);
                const y = e.clientY - (rect.top + rect.height / 2);
                this.updateTimeFromPosition(x, y);
            }
        });
    }
    
    handleDrag = (e) => {
        if (this.isDragging && !this.isActive) {
            const circle = document.querySelector('.progress-circle');
            const rect = circle.getBoundingClientRect();
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Å–∞–Ω–∏—è –∏–ª–∏ –º—ã—à–∏
            const clientX = e.touches ? e.touches[0].clientX : e.clientX;
            const clientY = e.touches ? e.touches[0].clientY : e.clientY;
            
            const x = clientX - (rect.left + rect.width / 2);
            const y = clientY - (rect.top + rect.height / 2);
            
            this.updateTimeFromPosition(x, y);
        }
    }
    
    stopDrag = () => {
        this.isDragging = false;
        document.removeEventListener('mousemove', this.handleDrag);
        document.removeEventListener('mouseup', this.stopDrag);
        document.removeEventListener('touchmove', this.handleDrag);
        document.removeEventListener('touchend', this.stopDrag);
    }
    
    updateTimeFromPosition(x, y) {
        // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª
        let angle = Math.atan2(y, x) * 180 / Math.PI;
        angle = (angle - this.startAngle + 360) % 360;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–≥–æ–ª –≤ –º–∏–Ω—É—Ç—ã (0-360¬∞ = 0-60 –º–∏–Ω—É—Ç)
        this.selectedDuration = Math.round(angle / 6);
        if (this.selectedDuration < 1) this.selectedDuration = 1;
        if (this.selectedDuration > this.maxDuration) this.selectedDuration = this.maxDuration;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.updateUI();
        this.updateMarkerPosition(angle);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        const gradient = document.querySelector('.circle-gradient');
        const percentage = (this.selectedDuration / this.maxDuration) * 100;
        gradient.style.background = `conic-gradient(
            from -90deg,
            var(--tg-theme-button-color) ${percentage}%,
            transparent ${percentage}%
        )`;
    }
    
    updateMarkerPosition(angle) {
        const marker = document.querySelector('.time-marker');
        const radius = 125; // –ü–æ–ª–æ–≤–∏–Ω–∞ —à–∏—Ä–∏–Ω—ã –∫—Ä—É–≥–∞
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞
        const radian = (angle + this.startAngle) * Math.PI / 180;
        const x = Math.cos(radian) * radius;
        const y = Math.sin(radian) * radius;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞
        marker.style.transform = `translate(${x}px, ${y}px)`;
    }

    showRandomQuote() {
        const quote = this.quotes[Math.floor(Math.random() * this.quotes.length)];
        const quoteElement = document.createElement('div');
        quoteElement.className = 'meditation-quote';
        quoteElement.innerHTML = `
            <p class="quote-text">${quote.text}</p>
            <p class="quote-author">‚Äî ${quote.author}</p>
        `;
        
        document.querySelector('.timer-display').appendChild(quoteElement);
    }

    createParticles() {
        const container = document.querySelector('.particles');
        
        const createParticle = () => {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.width = Math.random() * 10 + 5 + 'px';
            particle.style.height = particle.style.width;
            particle.style.animation = `float ${Math.random() * 2 + 2}s ease-out`;
            
            container.appendChild(particle);
            setTimeout(() => particle.remove(), 4000);
        };

        if (this.isActive) {
            createParticle();
            setTimeout(() => this.createParticles(), Math.random() * 1000 + 500);
        }
    }

    playUISound(sound) {
        if (this.uiSounds[sound]) {
            this.uiSounds[sound].currentTime = 0;
            this.uiSounds[sound].play().catch(() => {});
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new MeditationApp();
}); 