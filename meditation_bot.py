from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, JobQueue
import os
import asyncio
from datetime import datetime, timedelta
from meditation_timer import MeditationTimer

class MeditationBot:
    def __init__(self):
        self.active_sessions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π
        self.user_stats = {}      # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.available_sounds = {
            'rain': '–î–æ–∂–¥—å üåß',
            'forest': '–õ–µ—Å üå≤',
            'ocean': '–û–∫–µ–∞–Ω üåä',
            'silence': '–¢–∏—à–∏–Ω–∞ üïä'
        }
        self.meditation_times = [
            5, 10, 15, 20, 30
        ]  # –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        self.reminders = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.stars = {}      # –°–∏—Å—Ç–µ–º–∞ –∑–≤–µ–∑–¥

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é üßò", callback_data='start_meditation')],
            [InlineKeyboardButton("–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å üìä", callback_data='show_progress')],
            [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è∞", callback_data='set_reminder')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏! üåü\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = update.effective_user.id
        
        if query.data == 'start_meditation':
            await self.show_duration_selection(update, context)
        elif query.data.startswith('duration_'):
            duration = int(query.data.split('_')[1])
            await self.show_sound_selection(update, context, duration)
        elif query.data.startswith('sound_'):
            sound = query.data.split('_')[1]
            duration = context.user_data.get('selected_duration', 5)
            await self.start_meditation_session(update, context, duration, sound)
        elif query.data == 'show_progress':
            await self.show_user_progress(update, context)
        elif query.data == 'set_reminder':
            await self.show_reminder_settings(update, context)
        elif query.data == 'back_to_menu':
            await self.show_main_menu(update, context)
        elif query.data == 'stop_meditation':
            await self.stop_meditation(update, context)
        
        await query.answer()

    async def show_duration_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = []
        row = []
        for i, time in enumerate(self.meditation_times):
            row.append(InlineKeyboardButton(f"{time} –º–∏–Ω", callback_data=f'duration_{time}'))
            if (i + 1) % 3 == 0 or i == len(self.meditation_times) - 1:
                keyboard.append(row)
                row = []
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )

    async def show_sound_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, duration: int):
        context.user_data['selected_duration'] = duration
        keyboard = []
        for sound_id, sound_name in self.available_sounds.items():
            keyboard.append([InlineKeyboardButton(sound_name, callback_data=f'sound_{sound_id}')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤—É–∫–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è {duration}-–º–∏–Ω—É—Ç–Ω–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )

    async def start_meditation_session(self, update: Update, context: ContextTypes.DEFAULT_TYPE, duration: int, sound: str):
        user_id = update.effective_user.id
        timer = MeditationTimer(duration, user_id)
        self.active_sessions[user_id] = {
            'timer': timer,
            'sound': sound
        }
        
        progress_message = await update.callback_query.edit_message_text(
            self.format_meditation_message(0, duration),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚èπ", callback_data='stop_meditation')
            ]])
        )
        
        context.user_data['progress_message'] = progress_message
        timer.start()
        
        try:
            if hasattr(context, 'job_queue') and context.job_queue:
                context.job_queue.run_repeating(
                    self.update_progress_bar,
                    interval=1,
                    first=1,
                    data={'user_id': user_id, 'message_id': progress_message.message_id},
                    name=f'meditation_{user_id}'
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ job_queue: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    def format_meditation_message(self, progress: float, duration: int) -> str:
        bar_length = 20
        filled_length = int(bar_length * progress / 100)
        bar = '‚ñà' * filled_length + '‚ñí' * (bar_length - filled_length)
        return f"–ú–µ–¥–∏—Ç–∞—Ü–∏—è {duration} –º–∏–Ω—É—Ç\n\n" \
               f"–ü—Ä–æ–≥—Ä–µ—Å—Å: [{bar}] {progress:.1f}%\n\n" \
               f"–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –ø–æ–∫–æ–µ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –¥—ã—Ö–∞–Ω–∏–µ–º üßò‚Äç‚ôÇÔ∏è"

    async def update_progress_bar(self, context: ContextTypes.DEFAULT_TYPE):
        job = context.job
        user_id = job.data['user_id']
        message_id = job.data['message_id']
        
        if user_id not in self.active_sessions:
            job.schedule_removal()
            return
        
        session = self.active_sessions[user_id]
        timer = session['timer']
        progress = timer.get_progress_percentage()
        
        if progress >= 100:
            await self.finish_meditation(context, user_id)
            job.schedule_removal()
            return
        
        try:
            await context.bot.edit_message_text(
                self.format_meditation_message(progress, timer.duration.minutes),
                chat_id=user_id,
                message_id=message_id,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚èπ", callback_data='stop_meditation')
                ]])
            )
        except Exception:
            pass

    async def finish_meditation(self, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        if user_id not in self.user_stats:
            self.user_stats[user_id] = {'completed': 0, 'total_minutes': 0, 'stars': 0}
        
        session = self.active_sessions[user_id]
        timer = session['timer']
        duration = timer.duration.minutes
        
        stats = self.user_stats[user_id]
        stats['completed'] += 1
        stats['total_minutes'] += duration
        new_stars = duration // 5  # 1 –∑–≤–µ–∑–¥–∞ –∑–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        stats['stars'] += new_stars
        
        await context.bot.send_message(
            user_id,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚ú® –ü–æ–ª—É—á–µ–Ω–æ –∑–≤–µ–∑–¥: {new_stars}\n"
            f"‚≠êÔ∏è –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {stats['stars']}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é?",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–ù–æ–≤–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è üßò", callback_data='start_meditation')
            ]])
        )
        
        del self.active_sessions[user_id]

    async def show_user_progress(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        stats = self.user_stats.get(user_id, {'completed': 0, 'total_minutes': 0, 'stars': 0})
        
        await update.callback_query.edit_message_text(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üßò –ó–∞–≤–µ—Ä—à–µ–Ω–æ –º–µ–¥–∏—Ç–∞—Ü–∏–π: {stats['completed']}\n"
            f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_minutes']} –º–∏–Ω—É—Ç\n"
            f"‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–≤–µ–∑–¥: {stats['stars']}\n",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')
            ]])
        )

    async def show_reminder_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00", callback_data='reminder_daily_9')],
            [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00", callback_data='reminder_daily_20')],
            [InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data='reminder_off')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ]
        
        await update.callback_query.edit_message_text(
            "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é üßò", callback_data='start_meditation')],
            [InlineKeyboardButton("–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å üìä", callback_data='show_progress')],
            [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è∞", callback_data='set_reminder')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def stop_meditation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id in self.active_sessions:
            session = self.active_sessions[user_id]
            timer = session['timer']
            timer.stop()
            
            try:
                if hasattr(context, 'job_queue') and context.job_queue:
                    current_jobs = context.job_queue.get_jobs_by_name(f'meditation_{user_id}')
                    for job in current_jobs:
                        job.schedule_removal()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ job: {e}")
            
            del self.active_sessions[user_id]
            
            await update.callback_query.edit_message_text(
                "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–ù–æ–≤–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è üßò", callback_data='start_meditation'),
                    InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©Ô∏è", callback_data='back_to_menu')
                ]])
            )

def run_bot():
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
    bot_token = os.getenv('BOT_TOKEN', '8088995194:AAFZCd-1mJwLti808p85ZoSUP1mj9854cYg')
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    meditation_bot = MeditationBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π job_queue
    application = (
        Application.builder()
        .token(bot_token)
        .concurrent_updates(True)
        .build()
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", meditation_bot.start))
    application.add_handler(CallbackQueryHandler(meditation_bot.handle_callback))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    try:
        run_bot()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º") 